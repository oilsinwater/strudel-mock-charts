/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './pages/__root';
import { Route as IndexImport } from './pages/index';
import { Route as ExploreDataIndexImport } from './pages/explore-data/index';
import { Route as RunComputationLayoutImport } from './pages/run-computation/_layout';
import { Route as QualityBenchmarkLayoutImport } from './pages/quality-benchmark/_layout';
import { Route as ExploreDataIdImport } from './pages/explore-data/$id';
import { Route as RunComputationLayoutIndexImport } from './pages/run-computation/_layout/index';
import { Route as QualityBenchmarkLayoutIndexImport } from './pages/quality-benchmark/_layout/index';
import { Route as RunComputationLayoutNewImport } from './pages/run-computation/_layout/new';
import { Route as QualityBenchmarkLayoutCompareImport } from './pages/quality-benchmark/_layout/compare';
import { Route as ExploreDataVisualizeIdImport } from './pages/explore-data/visualize/$id';
import { Route as ExploreDataDetailIdImport } from './pages/explore-data/detail/$id';
import { Route as RunComputationLayoutResultsRunIdImport } from './pages/run-computation/_layout/results/$runId';
import { Route as QualityBenchmarkLayoutReportIdImport } from './pages/quality-benchmark/_layout/report/$id';

// Create Virtual Routes

const RunComputationImport = createFileRoute('/run-computation')();
const QualityBenchmarkImport = createFileRoute('/quality-benchmark')();

// Create/Update Routes

const RunComputationRoute = RunComputationImport.update({
  id: '/run-computation',
  path: '/run-computation',
  getParentRoute: () => rootRoute,
} as any);

const QualityBenchmarkRoute = QualityBenchmarkImport.update({
  id: '/quality-benchmark',
  path: '/quality-benchmark',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ExploreDataIndexRoute = ExploreDataIndexImport.update({
  id: '/explore-data/',
  path: '/explore-data/',
  getParentRoute: () => rootRoute,
} as any);

const RunComputationLayoutRoute = RunComputationLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => RunComputationRoute,
} as any);

const QualityBenchmarkLayoutRoute = QualityBenchmarkLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => QualityBenchmarkRoute,
} as any);

const ExploreDataIdRoute = ExploreDataIdImport.update({
  id: '/explore-data/$id',
  path: '/explore-data/$id',
  getParentRoute: () => rootRoute,
} as any);

const RunComputationLayoutIndexRoute = RunComputationLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RunComputationLayoutRoute,
} as any);

const QualityBenchmarkLayoutIndexRoute =
  QualityBenchmarkLayoutIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => QualityBenchmarkLayoutRoute,
  } as any);

const RunComputationLayoutNewRoute = RunComputationLayoutNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => RunComputationLayoutRoute,
} as any);

const QualityBenchmarkLayoutCompareRoute =
  QualityBenchmarkLayoutCompareImport.update({
    id: '/compare',
    path: '/compare',
    getParentRoute: () => QualityBenchmarkLayoutRoute,
  } as any);

const ExploreDataVisualizeIdRoute = ExploreDataVisualizeIdImport.update({
  id: '/explore-data/visualize/$id',
  path: '/explore-data/visualize/$id',
  getParentRoute: () => rootRoute,
} as any);

const ExploreDataDetailIdRoute = ExploreDataDetailIdImport.update({
  id: '/explore-data/detail/$id',
  path: '/explore-data/detail/$id',
  getParentRoute: () => rootRoute,
} as any);

const RunComputationLayoutResultsRunIdRoute =
  RunComputationLayoutResultsRunIdImport.update({
    id: '/results/$runId',
    path: '/results/$runId',
    getParentRoute: () => RunComputationLayoutRoute,
  } as any);

const QualityBenchmarkLayoutReportIdRoute =
  QualityBenchmarkLayoutReportIdImport.update({
    id: '/report/$id',
    path: '/report/$id',
    getParentRoute: () => QualityBenchmarkLayoutRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/explore-data/$id': {
      id: '/explore-data/$id';
      path: '/explore-data/$id';
      fullPath: '/explore-data/$id';
      preLoaderRoute: typeof ExploreDataIdImport;
      parentRoute: typeof rootRoute;
    };
    '/quality-benchmark': {
      id: '/quality-benchmark';
      path: '/quality-benchmark';
      fullPath: '/quality-benchmark';
      preLoaderRoute: typeof QualityBenchmarkImport;
      parentRoute: typeof rootRoute;
    };
    '/quality-benchmark/_layout': {
      id: '/quality-benchmark/_layout';
      path: '/quality-benchmark';
      fullPath: '/quality-benchmark';
      preLoaderRoute: typeof QualityBenchmarkLayoutImport;
      parentRoute: typeof QualityBenchmarkRoute;
    };
    '/run-computation': {
      id: '/run-computation';
      path: '/run-computation';
      fullPath: '/run-computation';
      preLoaderRoute: typeof RunComputationImport;
      parentRoute: typeof rootRoute;
    };
    '/run-computation/_layout': {
      id: '/run-computation/_layout';
      path: '/run-computation';
      fullPath: '/run-computation';
      preLoaderRoute: typeof RunComputationLayoutImport;
      parentRoute: typeof RunComputationRoute;
    };
    '/explore-data/': {
      id: '/explore-data/';
      path: '/explore-data';
      fullPath: '/explore-data';
      preLoaderRoute: typeof ExploreDataIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/explore-data/detail/$id': {
      id: '/explore-data/detail/$id';
      path: '/explore-data/detail/$id';
      fullPath: '/explore-data/detail/$id';
      preLoaderRoute: typeof ExploreDataDetailIdImport;
      parentRoute: typeof rootRoute;
    };
    '/explore-data/visualize/$id': {
      id: '/explore-data/visualize/$id';
      path: '/explore-data/visualize/$id';
      fullPath: '/explore-data/visualize/$id';
      preLoaderRoute: typeof ExploreDataVisualizeIdImport;
      parentRoute: typeof rootRoute;
    };
    '/quality-benchmark/_layout/compare': {
      id: '/quality-benchmark/_layout/compare';
      path: '/compare';
      fullPath: '/quality-benchmark/compare';
      preLoaderRoute: typeof QualityBenchmarkLayoutCompareImport;
      parentRoute: typeof QualityBenchmarkLayoutImport;
    };
    '/run-computation/_layout/new': {
      id: '/run-computation/_layout/new';
      path: '/new';
      fullPath: '/run-computation/new';
      preLoaderRoute: typeof RunComputationLayoutNewImport;
      parentRoute: typeof RunComputationLayoutImport;
    };
    '/quality-benchmark/_layout/': {
      id: '/quality-benchmark/_layout/';
      path: '/';
      fullPath: '/quality-benchmark/';
      preLoaderRoute: typeof QualityBenchmarkLayoutIndexImport;
      parentRoute: typeof QualityBenchmarkLayoutImport;
    };
    '/run-computation/_layout/': {
      id: '/run-computation/_layout/';
      path: '/';
      fullPath: '/run-computation/';
      preLoaderRoute: typeof RunComputationLayoutIndexImport;
      parentRoute: typeof RunComputationLayoutImport;
    };
    '/quality-benchmark/_layout/report/$id': {
      id: '/quality-benchmark/_layout/report/$id';
      path: '/report/$id';
      fullPath: '/quality-benchmark/report/$id';
      preLoaderRoute: typeof QualityBenchmarkLayoutReportIdImport;
      parentRoute: typeof QualityBenchmarkLayoutImport;
    };
    '/run-computation/_layout/results/$runId': {
      id: '/run-computation/_layout/results/$runId';
      path: '/results/$runId';
      fullPath: '/run-computation/results/$runId';
      preLoaderRoute: typeof RunComputationLayoutResultsRunIdImport;
      parentRoute: typeof RunComputationLayoutImport;
    };
  }
}

// Create and export the route tree

interface QualityBenchmarkLayoutRouteChildren {
  QualityBenchmarkLayoutCompareRoute: typeof QualityBenchmarkLayoutCompareRoute;
  QualityBenchmarkLayoutIndexRoute: typeof QualityBenchmarkLayoutIndexRoute;
  QualityBenchmarkLayoutReportIdRoute: typeof QualityBenchmarkLayoutReportIdRoute;
}

const QualityBenchmarkLayoutRouteChildren: QualityBenchmarkLayoutRouteChildren =
  {
    QualityBenchmarkLayoutCompareRoute: QualityBenchmarkLayoutCompareRoute,
    QualityBenchmarkLayoutIndexRoute: QualityBenchmarkLayoutIndexRoute,
    QualityBenchmarkLayoutReportIdRoute: QualityBenchmarkLayoutReportIdRoute,
  };

const QualityBenchmarkLayoutRouteWithChildren =
  QualityBenchmarkLayoutRoute._addFileChildren(
    QualityBenchmarkLayoutRouteChildren
  );

interface QualityBenchmarkRouteChildren {
  QualityBenchmarkLayoutRoute: typeof QualityBenchmarkLayoutRouteWithChildren;
}

const QualityBenchmarkRouteChildren: QualityBenchmarkRouteChildren = {
  QualityBenchmarkLayoutRoute: QualityBenchmarkLayoutRouteWithChildren,
};

const QualityBenchmarkRouteWithChildren =
  QualityBenchmarkRoute._addFileChildren(QualityBenchmarkRouteChildren);

interface RunComputationLayoutRouteChildren {
  RunComputationLayoutNewRoute: typeof RunComputationLayoutNewRoute;
  RunComputationLayoutIndexRoute: typeof RunComputationLayoutIndexRoute;
  RunComputationLayoutResultsRunIdRoute: typeof RunComputationLayoutResultsRunIdRoute;
}

const RunComputationLayoutRouteChildren: RunComputationLayoutRouteChildren = {
  RunComputationLayoutNewRoute: RunComputationLayoutNewRoute,
  RunComputationLayoutIndexRoute: RunComputationLayoutIndexRoute,
  RunComputationLayoutResultsRunIdRoute: RunComputationLayoutResultsRunIdRoute,
};

const RunComputationLayoutRouteWithChildren =
  RunComputationLayoutRoute._addFileChildren(RunComputationLayoutRouteChildren);

interface RunComputationRouteChildren {
  RunComputationLayoutRoute: typeof RunComputationLayoutRouteWithChildren;
}

const RunComputationRouteChildren: RunComputationRouteChildren = {
  RunComputationLayoutRoute: RunComputationLayoutRouteWithChildren,
};

const RunComputationRouteWithChildren = RunComputationRoute._addFileChildren(
  RunComputationRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/explore-data/$id': typeof ExploreDataIdRoute;
  '/quality-benchmark': typeof QualityBenchmarkLayoutRouteWithChildren;
  '/run-computation': typeof RunComputationLayoutRouteWithChildren;
  '/explore-data': typeof ExploreDataIndexRoute;
  '/explore-data/detail/$id': typeof ExploreDataDetailIdRoute;
  '/explore-data/visualize/$id': typeof ExploreDataVisualizeIdRoute;
  '/quality-benchmark/compare': typeof QualityBenchmarkLayoutCompareRoute;
  '/run-computation/new': typeof RunComputationLayoutNewRoute;
  '/quality-benchmark/': typeof QualityBenchmarkLayoutIndexRoute;
  '/run-computation/': typeof RunComputationLayoutIndexRoute;
  '/quality-benchmark/report/$id': typeof QualityBenchmarkLayoutReportIdRoute;
  '/run-computation/results/$runId': typeof RunComputationLayoutResultsRunIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/explore-data/$id': typeof ExploreDataIdRoute;
  '/quality-benchmark': typeof QualityBenchmarkLayoutIndexRoute;
  '/run-computation': typeof RunComputationLayoutIndexRoute;
  '/explore-data': typeof ExploreDataIndexRoute;
  '/explore-data/detail/$id': typeof ExploreDataDetailIdRoute;
  '/explore-data/visualize/$id': typeof ExploreDataVisualizeIdRoute;
  '/quality-benchmark/compare': typeof QualityBenchmarkLayoutCompareRoute;
  '/run-computation/new': typeof RunComputationLayoutNewRoute;
  '/quality-benchmark/report/$id': typeof QualityBenchmarkLayoutReportIdRoute;
  '/run-computation/results/$runId': typeof RunComputationLayoutResultsRunIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/explore-data/$id': typeof ExploreDataIdRoute;
  '/quality-benchmark': typeof QualityBenchmarkRouteWithChildren;
  '/quality-benchmark/_layout': typeof QualityBenchmarkLayoutRouteWithChildren;
  '/run-computation': typeof RunComputationRouteWithChildren;
  '/run-computation/_layout': typeof RunComputationLayoutRouteWithChildren;
  '/explore-data/': typeof ExploreDataIndexRoute;
  '/explore-data/detail/$id': typeof ExploreDataDetailIdRoute;
  '/explore-data/visualize/$id': typeof ExploreDataVisualizeIdRoute;
  '/quality-benchmark/_layout/compare': typeof QualityBenchmarkLayoutCompareRoute;
  '/run-computation/_layout/new': typeof RunComputationLayoutNewRoute;
  '/quality-benchmark/_layout/': typeof QualityBenchmarkLayoutIndexRoute;
  '/run-computation/_layout/': typeof RunComputationLayoutIndexRoute;
  '/quality-benchmark/_layout/report/$id': typeof QualityBenchmarkLayoutReportIdRoute;
  '/run-computation/_layout/results/$runId': typeof RunComputationLayoutResultsRunIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/explore-data/$id'
    | '/quality-benchmark'
    | '/run-computation'
    | '/explore-data'
    | '/explore-data/detail/$id'
    | '/explore-data/visualize/$id'
    | '/quality-benchmark/compare'
    | '/run-computation/new'
    | '/quality-benchmark/'
    | '/run-computation/'
    | '/quality-benchmark/report/$id'
    | '/run-computation/results/$runId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/explore-data/$id'
    | '/quality-benchmark'
    | '/run-computation'
    | '/explore-data'
    | '/explore-data/detail/$id'
    | '/explore-data/visualize/$id'
    | '/quality-benchmark/compare'
    | '/run-computation/new'
    | '/quality-benchmark/report/$id'
    | '/run-computation/results/$runId';
  id:
    | '__root__'
    | '/'
    | '/explore-data/$id'
    | '/quality-benchmark'
    | '/quality-benchmark/_layout'
    | '/run-computation'
    | '/run-computation/_layout'
    | '/explore-data/'
    | '/explore-data/detail/$id'
    | '/explore-data/visualize/$id'
    | '/quality-benchmark/_layout/compare'
    | '/run-computation/_layout/new'
    | '/quality-benchmark/_layout/'
    | '/run-computation/_layout/'
    | '/quality-benchmark/_layout/report/$id'
    | '/run-computation/_layout/results/$runId';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ExploreDataIdRoute: typeof ExploreDataIdRoute;
  QualityBenchmarkRoute: typeof QualityBenchmarkRouteWithChildren;
  RunComputationRoute: typeof RunComputationRouteWithChildren;
  ExploreDataIndexRoute: typeof ExploreDataIndexRoute;
  ExploreDataDetailIdRoute: typeof ExploreDataDetailIdRoute;
  ExploreDataVisualizeIdRoute: typeof ExploreDataVisualizeIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExploreDataIdRoute: ExploreDataIdRoute,
  QualityBenchmarkRoute: QualityBenchmarkRouteWithChildren,
  RunComputationRoute: RunComputationRouteWithChildren,
  ExploreDataIndexRoute: ExploreDataIndexRoute,
  ExploreDataDetailIdRoute: ExploreDataDetailIdRoute,
  ExploreDataVisualizeIdRoute: ExploreDataVisualizeIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/explore-data/$id",
        "/quality-benchmark",
        "/run-computation",
        "/explore-data/",
        "/explore-data/detail/$id",
        "/explore-data/visualize/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/explore-data/$id": {
      "filePath": "explore-data/$id.tsx"
    },
    "/quality-benchmark": {
      "filePath": "quality-benchmark",
      "children": [
        "/quality-benchmark/_layout"
      ]
    },
    "/quality-benchmark/_layout": {
      "filePath": "quality-benchmark/_layout.tsx",
      "parent": "/quality-benchmark",
      "children": [
        "/quality-benchmark/_layout/compare",
        "/quality-benchmark/_layout/",
        "/quality-benchmark/_layout/report/$id"
      ]
    },
    "/run-computation": {
      "filePath": "run-computation",
      "children": [
        "/run-computation/_layout"
      ]
    },
    "/run-computation/_layout": {
      "filePath": "run-computation/_layout.tsx",
      "parent": "/run-computation",
      "children": [
        "/run-computation/_layout/new",
        "/run-computation/_layout/",
        "/run-computation/_layout/results/$runId"
      ]
    },
    "/explore-data/": {
      "filePath": "explore-data/index.tsx"
    },
    "/explore-data/detail/$id": {
      "filePath": "explore-data/detail/$id.tsx"
    },
    "/explore-data/visualize/$id": {
      "filePath": "explore-data/visualize/$id.tsx"
    },
    "/quality-benchmark/_layout/compare": {
      "filePath": "quality-benchmark/_layout/compare.tsx",
      "parent": "/quality-benchmark/_layout"
    },
    "/run-computation/_layout/new": {
      "filePath": "run-computation/_layout/new.tsx",
      "parent": "/run-computation/_layout"
    },
    "/quality-benchmark/_layout/": {
      "filePath": "quality-benchmark/_layout/index.tsx",
      "parent": "/quality-benchmark/_layout"
    },
    "/run-computation/_layout/": {
      "filePath": "run-computation/_layout/index.tsx",
      "parent": "/run-computation/_layout"
    },
    "/quality-benchmark/_layout/report/$id": {
      "filePath": "quality-benchmark/_layout/report/$id.tsx",
      "parent": "/quality-benchmark/_layout"
    },
    "/run-computation/_layout/results/$runId": {
      "filePath": "run-computation/_layout/results/$runId.tsx",
      "parent": "/run-computation/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
